/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
import { ControllerType } from '../registry/controller-type.js';
import { CLASS_LOADER, CREATOR } from '../symbols/index.js';
import { injectControllerOptions } from './helpers/inject-controller-options.js';
import { patchMethods } from './helpers/patch-methods.js';
import { ControllerTypeStrategies } from './strategies/controller-type.js';
function makeConfig(config) {
    if (typeof config === 'string')
        config = { route: config };
    return { type: ControllerType.SINGLETON, route: '/', tags: [], ...config };
}
export function Controller(config) {
    return (controller) => {
        const { route, type, tags } = makeConfig(config);
        injectControllerOptions(controller);
        patchMethods(controller);
        controller[CREATOR].register = async (instance, prefix = '', classLoader = instance[CLASS_LOADER]) => {
            let controllerInstance;
            await instance.register(async (instance) => {
                controllerInstance = ControllerTypeStrategies[type](instance, controller, classLoader, tags);
            }, { prefix: prefix + route });
            return controllerInstance;
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9kZWNvcmF0b3JzL2NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBS0gsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDakYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzFELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRTNFLFNBQVMsVUFBVSxDQUFDLE1BQWtDO0lBQ3BELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUTtRQUFFLE1BQU0sR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQztJQUUzRCxPQUFPLEVBQUUsSUFBSSxFQUFFLGNBQWMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDN0UsQ0FBQztBQVFELE1BQU0sVUFBVSxVQUFVLENBQUMsTUFBa0M7SUFDM0QsT0FBTyxDQUFDLFVBQTJCLEVBQVEsRUFBRTtRQUMzQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFakQsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXpCLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEdBQUcsS0FBSyxFQUFFLFFBQXlCLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxXQUFXLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUU7WUFDcEgsSUFBSSxrQkFBa0IsQ0FBQztZQUV2QixNQUFNLFFBQVEsQ0FBQyxRQUFRLENBQ3JCLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFBRTtnQkFDakIsa0JBQWtCLEdBQUcsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDL0YsQ0FBQyxFQUNELEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxLQUFLLEVBQUUsQ0FDM0IsQ0FBQztZQUVGLE9BQU8sa0JBQWtCLENBQUM7UUFDNUIsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbmRyZXkgQ2hhbGtpbiA8TDJqTGlnYUBnbWFpbC5jb20+IChodHRwczovL2dpdGh1Yi5jb20vTDJqTGlnYSkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL0wyakxpZ2EvZmFzdGlmeS1kZWNvcmF0b3JzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgdHlwZSB7IEZhc3RpZnlJbnN0YW5jZSB9IGZyb20gJ2Zhc3RpZnknO1xuaW1wb3J0IHR5cGUgeyBDb250cm9sbGVyQ29uZmlnIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9pbmRleC5qcyc7XG5pbXBvcnQgdHlwZSB7IEluamVjdGFibGVDbGFzcyB9IGZyb20gJy4uL2ludGVyZmFjZXMvaW5qZWN0YWJsZS1jbGFzcy5qcyc7XG5pbXBvcnQgeyBDb250cm9sbGVyVHlwZSB9IGZyb20gJy4uL3JlZ2lzdHJ5L2NvbnRyb2xsZXItdHlwZS5qcyc7XG5pbXBvcnQgeyBDTEFTU19MT0FERVIsIENSRUFUT1IgfSBmcm9tICcuLi9zeW1ib2xzL2luZGV4LmpzJztcbmltcG9ydCB7IGluamVjdENvbnRyb2xsZXJPcHRpb25zIH0gZnJvbSAnLi9oZWxwZXJzL2luamVjdC1jb250cm9sbGVyLW9wdGlvbnMuanMnO1xuaW1wb3J0IHsgcGF0Y2hNZXRob2RzIH0gZnJvbSAnLi9oZWxwZXJzL3BhdGNoLW1ldGhvZHMuanMnO1xuaW1wb3J0IHsgQ29udHJvbGxlclR5cGVTdHJhdGVnaWVzIH0gZnJvbSAnLi9zdHJhdGVnaWVzL2NvbnRyb2xsZXItdHlwZS5qcyc7XG5cbmZ1bmN0aW9uIG1ha2VDb25maWcoY29uZmlnPzogc3RyaW5nIHwgQ29udHJvbGxlckNvbmZpZyk6IFJlcXVpcmVkPENvbnRyb2xsZXJDb25maWc+IHtcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSBjb25maWcgPSB7IHJvdXRlOiBjb25maWcgfTtcblxuICByZXR1cm4geyB0eXBlOiBDb250cm9sbGVyVHlwZS5TSU5HTEVUT04sIHJvdXRlOiAnLycsIHRhZ3M6IFtdLCAuLi5jb25maWcgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIHJlZ2lzdGVyIG1ldGhvZCBvbiBjb250cm9sbGVyIHRvIGFsbG93IGJvb3RzdHJhcCBpdFxuICovXG5leHBvcnQgZnVuY3Rpb24gQ29udHJvbGxlcigpOiBDbGFzc0RlY29yYXRvcjtcbmV4cG9ydCBmdW5jdGlvbiBDb250cm9sbGVyKHJvdXRlOiBzdHJpbmcpOiBDbGFzc0RlY29yYXRvcjtcbmV4cG9ydCBmdW5jdGlvbiBDb250cm9sbGVyKGNvbmZpZzogQ29udHJvbGxlckNvbmZpZyk6IENsYXNzRGVjb3JhdG9yO1xuZXhwb3J0IGZ1bmN0aW9uIENvbnRyb2xsZXIoY29uZmlnPzogc3RyaW5nIHwgQ29udHJvbGxlckNvbmZpZyk6IHVua25vd24ge1xuICByZXR1cm4gKGNvbnRyb2xsZXI6IEluamVjdGFibGVDbGFzcyk6IHZvaWQgPT4ge1xuICAgIGNvbnN0IHsgcm91dGUsIHR5cGUsIHRhZ3MgfSA9IG1ha2VDb25maWcoY29uZmlnKTtcblxuICAgIGluamVjdENvbnRyb2xsZXJPcHRpb25zKGNvbnRyb2xsZXIpO1xuICAgIHBhdGNoTWV0aG9kcyhjb250cm9sbGVyKTtcblxuICAgIGNvbnRyb2xsZXJbQ1JFQVRPUl0ucmVnaXN0ZXIgPSBhc3luYyAoaW5zdGFuY2U6IEZhc3RpZnlJbnN0YW5jZSwgcHJlZml4ID0gJycsIGNsYXNzTG9hZGVyID0gaW5zdGFuY2VbQ0xBU1NfTE9BREVSXSkgPT4ge1xuICAgICAgbGV0IGNvbnRyb2xsZXJJbnN0YW5jZTtcblxuICAgICAgYXdhaXQgaW5zdGFuY2UucmVnaXN0ZXIoXG4gICAgICAgIGFzeW5jIChpbnN0YW5jZSkgPT4ge1xuICAgICAgICAgIGNvbnRyb2xsZXJJbnN0YW5jZSA9IENvbnRyb2xsZXJUeXBlU3RyYXRlZ2llc1t0eXBlXShpbnN0YW5jZSwgY29udHJvbGxlciwgY2xhc3NMb2FkZXIsIHRhZ3MpO1xuICAgICAgICB9LFxuICAgICAgICB7IHByZWZpeDogcHJlZml4ICsgcm91dGUgfSxcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBjb250cm9sbGVySW5zdGFuY2U7XG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==