/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
import { ERROR_HANDLERS, HANDLERS, HOOKS, SERVICE_INJECTION } from '../../symbols/index.js';
import { Container } from './container.js';
export function ensureHandlers(target) {
    if (!Object.prototype.hasOwnProperty.call(target, HANDLERS)) {
        Reflect.defineProperty(target, HANDLERS, {
            value: new Container(target[HANDLERS]),
            enumerable: false,
            configurable: false,
            writable: false,
        });
    }
}
export function hasHandlers(target) {
    return HANDLERS in target;
}
export function ensureErrorHandlers(target) {
    if (!Object.prototype.hasOwnProperty.call(target, ERROR_HANDLERS)) {
        Reflect.defineProperty(target, ERROR_HANDLERS, {
            value: new Container(target[ERROR_HANDLERS]),
            enumerable: false,
            configurable: false,
            writable: false,
        });
    }
}
export function hasErrorHandlers(target) {
    return ERROR_HANDLERS in target;
}
export function ensureHooks(target) {
    if (!Object.prototype.hasOwnProperty.call(target, HOOKS)) {
        Reflect.defineProperty(target, HOOKS, {
            value: new Container(target[HOOKS]),
            enumerable: false,
            configurable: false,
            writable: false,
        });
    }
}
export function hasHooks(target) {
    return HOOKS in target;
}
export function ensureServiceInjection(target) {
    if (!Object.prototype.hasOwnProperty.call(target, SERVICE_INJECTION)) {
        Reflect.defineProperty(target, SERVICE_INJECTION, {
            value: new Container(target[SERVICE_INJECTION]),
            enumerable: false,
            configurable: false,
            writable: false,
        });
    }
}
export function hasServiceInjection(val) {
    return ['function', 'object'].includes(typeof val) && val !== null && SERVICE_INJECTION in val;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3MtcHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9kZWNvcmF0b3JzL2hlbHBlcnMvY2xhc3MtcHJvcGVydGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFHSCxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsTUFBTSxVQUFVLGNBQWMsQ0FBQyxNQUE0QztJQUN6RSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsRUFBRTtRQUMzRCxPQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUU7WUFDdkMsS0FBSyxFQUFFLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN0QyxVQUFVLEVBQUUsS0FBSztZQUNqQixZQUFZLEVBQUUsS0FBSztZQUNuQixRQUFRLEVBQUUsS0FBSztTQUNoQixDQUFDLENBQUM7S0FDSjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFjLE1BQW1CO0lBQzFELE9BQU8sUUFBUSxJQUFJLE1BQU0sQ0FBQztBQUM1QixDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLE1BQXVEO0lBQ3pGLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxFQUFFO1FBQ2pFLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRTtZQUM3QyxLQUFLLEVBQUUsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQzVDLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLFlBQVksRUFBRSxLQUFLO1lBQ25CLFFBQVEsRUFBRSxLQUFLO1NBQ2hCLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBSSxNQUFTO0lBQzNDLE9BQU8sY0FBYyxJQUFJLE1BQU0sQ0FBQztBQUNsQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxNQUFzQztJQUNoRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRTtRQUN4RCxPQUFPLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUU7WUFDcEMsS0FBSyxFQUFFLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxVQUFVLEVBQUUsS0FBSztZQUNqQixZQUFZLEVBQUUsS0FBSztZQUNuQixRQUFRLEVBQUUsS0FBSztTQUNoQixDQUFDLENBQUM7S0FDSjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFJLE1BQVM7SUFDbkMsT0FBTyxLQUFLLElBQUksTUFBTSxDQUFDO0FBQ3pCLENBQUM7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsTUFFdEM7SUFDQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxFQUFFO1FBQ3BFLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGlCQUFpQixFQUFFO1lBQ2hELEtBQUssRUFBRSxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUMvQyxVQUFVLEVBQUUsS0FBSztZQUNqQixZQUFZLEVBQUUsS0FBSztZQUNuQixRQUFRLEVBQUUsS0FBSztTQUNoQixDQUFDLENBQUM7S0FDSjtBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUksR0FBTTtJQUMzQyxPQUFPLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksaUJBQWlCLElBQUksR0FBRyxDQUFDO0FBQ2pHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQW5kcmV5IENoYWxraW4gPEwyakxpZ2FAZ21haWwuY29tPiAoaHR0cHM6Ly9naXRodWIuY29tL0wyakxpZ2EpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9MMmpMaWdhL2Zhc3RpZnktZGVjb3JhdG9ycy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHsgSUVycm9ySGFuZGxlciwgSUhhbmRsZXIsIElIb29rIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9jb250cm9sbGVyLmpzJztcbmltcG9ydCB7IEVSUk9SX0hBTkRMRVJTLCBIQU5ETEVSUywgSE9PS1MsIFNFUlZJQ0VfSU5KRUNUSU9OIH0gZnJvbSAnLi4vLi4vc3ltYm9scy9pbmRleC5qcyc7XG5pbXBvcnQgeyBTZXJ2aWNlSW5qZWN0aW9uIH0gZnJvbSAnLi9pbmplY3QtZGVwZW5kZW5jaWVzLmpzJztcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4vY29udGFpbmVyLmpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUhhbmRsZXJzKHRhcmdldDogeyBbSEFORExFUlNdPzogQ29udGFpbmVyPElIYW5kbGVyPiB9KTogYXNzZXJ0cyB0YXJnZXQgaXMgeyBbSEFORExFUlNdOiBDb250YWluZXI8SUhhbmRsZXI+IH0ge1xuICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIEhBTkRMRVJTKSkge1xuICAgIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBIQU5ETEVSUywge1xuICAgICAgdmFsdWU6IG5ldyBDb250YWluZXIodGFyZ2V0W0hBTkRMRVJTXSksXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0hhbmRsZXJzPENvbnN0cnVjdG9yPih0YXJnZXQ6IENvbnN0cnVjdG9yKTogdGFyZ2V0IGlzIENvbnN0cnVjdG9yICYgeyBbSEFORExFUlNdOiBDb250YWluZXI8SUhhbmRsZXI+IH0ge1xuICByZXR1cm4gSEFORExFUlMgaW4gdGFyZ2V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlRXJyb3JIYW5kbGVycyh0YXJnZXQ6IHsgW0VSUk9SX0hBTkRMRVJTXT86IENvbnRhaW5lcjxJRXJyb3JIYW5kbGVyPiB9KTogYXNzZXJ0cyB0YXJnZXQgaXMgeyBbRVJST1JfSEFORExFUlNdOiBDb250YWluZXI8SUVycm9ySGFuZGxlcj4gfSB7XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgRVJST1JfSEFORExFUlMpKSB7XG4gICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIEVSUk9SX0hBTkRMRVJTLCB7XG4gICAgICB2YWx1ZTogbmV3IENvbnRhaW5lcih0YXJnZXRbRVJST1JfSEFORExFUlNdKSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzRXJyb3JIYW5kbGVyczxUPih0YXJnZXQ6IFQpOiB0YXJnZXQgaXMgVCAmIHsgW0VSUk9SX0hBTkRMRVJTXTogQ29udGFpbmVyPElFcnJvckhhbmRsZXI+IH0ge1xuICByZXR1cm4gRVJST1JfSEFORExFUlMgaW4gdGFyZ2V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlSG9va3ModGFyZ2V0OiB7IFtIT09LU10/OiBDb250YWluZXI8SUhvb2s+IH0pOiBhc3NlcnRzIHRhcmdldCBpcyB7IFtIT09LU106IENvbnRhaW5lcjxJSG9vaz4gfSB7XG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgSE9PS1MpKSB7XG4gICAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIEhPT0tTLCB7XG4gICAgICB2YWx1ZTogbmV3IENvbnRhaW5lcih0YXJnZXRbSE9PS1NdKSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzSG9va3M8VD4odGFyZ2V0OiBUKTogdGFyZ2V0IGlzIFQgJiB7IFtIT09LU106IENvbnRhaW5lcjxJSG9vaz4gfSB7XG4gIHJldHVybiBIT09LUyBpbiB0YXJnZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVTZXJ2aWNlSW5qZWN0aW9uKHRhcmdldDoge1xuICBbU0VSVklDRV9JTkpFQ1RJT05dPzogQ29udGFpbmVyPFNlcnZpY2VJbmplY3Rpb24+O1xufSk6IGFzc2VydHMgdGFyZ2V0IGlzIHsgW1NFUlZJQ0VfSU5KRUNUSU9OXTogQ29udGFpbmVyPFNlcnZpY2VJbmplY3Rpb24+IH0ge1xuICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIFNFUlZJQ0VfSU5KRUNUSU9OKSkge1xuICAgIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBTRVJWSUNFX0lOSkVDVElPTiwge1xuICAgICAgdmFsdWU6IG5ldyBDb250YWluZXIodGFyZ2V0W1NFUlZJQ0VfSU5KRUNUSU9OXSksXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1NlcnZpY2VJbmplY3Rpb248VD4odmFsOiBUKTogdmFsIGlzIFQgJiB7IFtTRVJWSUNFX0lOSkVDVElPTl06IENvbnRhaW5lcjxTZXJ2aWNlSW5qZWN0aW9uPiB9IHtcbiAgcmV0dXJuIFsnZnVuY3Rpb24nLCAnb2JqZWN0J10uaW5jbHVkZXModHlwZW9mIHZhbCkgJiYgdmFsICE9PSBudWxsICYmIFNFUlZJQ0VfSU5KRUNUSU9OIGluIHZhbDtcbn1cbiJdfQ==