/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
import { CREATOR, SERVICE_INJECTION } from '../../symbols/index.js';
import { hasServiceInjection } from './class-properties.js';
import { defaultScope, dependencyScopeManager } from './dependency-scope.js';
export function classLoaderFactory(injectables) {
    function classLoader(constructor, scope) {
        scope = scope || defaultScope;
        if (dependencyScopeManager.has(scope, constructor))
            return dependencyScopeManager.get(scope, constructor);
        /**
         * Step 1: Patch constructor and prototype with Injectables (issue #752)
         */
        injectProperties(constructor, constructor, injectables, classLoader, constructor.name);
        injectProperties(constructor.prototype, constructor.prototype, injectables, classLoader, constructor.name);
        /**
         * Step 2: Create instance
         */
        const instance = typeof Reflect.getMetadata === 'function' ? new constructor(...getArguments(constructor, injectables, classLoader, constructor.name)) : new constructor();
        /**
         * Step 3: Inject dependencies into instance (issue #750)
         */
        injectProperties(instance, constructor.prototype, injectables, classLoader, constructor.name);
        /**
         * Step 4: Optionally store instance in Map if cache enabled
         */
        dependencyScopeManager.add(scope, constructor, instance);
        /**
         * Step 4: Return instance with dependencies injected
         */
        return instance;
    }
    return Object.assign(classLoader, {
        reset(scope) {
            dependencyScopeManager.clear(scope);
        },
    });
}
function injectProperties(target, source, injectables, classLoader, className) {
    if (!hasServiceInjection(source))
        return;
    const viaInject = source[SERVICE_INJECTION];
    for (const { name, propertyKey } of viaInject) {
        if (!injectables.has(name))
            throw new TypeError(`Invalid argument provided for "${className}.${String(propertyKey)}". Expected class annotated with @Service.`);
        Object.defineProperty(target, propertyKey, {
            // @ts-expect-error we already have checked that injectables list has this entry, no needs to nullish coalescing and so on
            value: injectables.get(name)[CREATOR].register(classLoader),
            enumerable: true,
            configurable: true,
        });
    }
}
function getArguments(constructor, injectables, classLoader, className) {
    const metadata = Reflect.getMetadata('design:paramtypes', constructor) || [];
    return metadata
        .map((value) => injectables.get(value))
        .map((value) => {
        if (value)
            return value[CREATOR].register(classLoader);
        throw new TypeError(`Invalid argument provided in ${className}'s constructor. Expected class annotated with @Service.`);
    });
}
//# sourceMappingURL=data:application/json;base64,