import { ERROR_HANDLERS, FASTIFY_REPLY, FASTIFY_REQUEST, HANDLERS, HOOKS, SERVICE_INJECTION } from '../../symbols/index.js';
import { hasErrorHandlers, hasHandlers, hasHooks, hasServiceInjection } from './class-properties.js';
export function patchMethods(constructor) {
    patchHandlers(constructor);
    patchErrorsHandlers(constructor);
    patchHooks(constructor);
}
function patchHandlers(constructor) {
    if (hasHandlers(constructor))
        for (const it of constructor[HANDLERS])
            patchMethod(constructor, it.handlerMethod);
}
function patchErrorsHandlers(constructor) {
    if (hasErrorHandlers(constructor))
        for (const it of constructor[ERROR_HANDLERS])
            patchMethod(constructor, it.handlerName);
}
function patchHooks(constructor) {
    if (hasHooks(constructor))
        for (const it of constructor[HOOKS])
            patchMethod(constructor, it.handlerName);
}
function patchMethod(constructor, methodName) {
    const _original = constructor.prototype[methodName];
    constructor.prototype[methodName] = function methodProxy(request, reply, ...rest) {
        return _original.call(createProxy(this, request, reply), request, reply, ...rest);
    };
}
function createProxy(target, request, reply) {
    return new Proxy(target, {
        get(target, p) {
            const value = target[p];
            if (value === FASTIFY_REQUEST)
                return request;
            if (value === FASTIFY_REPLY)
                return reply;
            if (hasServiceInjection(value))
                return createProxy(value, request, reply);
            return value;
        },
        /**
         * Avoid creating proxies over proxies by telling that already proxied class does not have any service injection
         */
        has(target, p) {
            if (p === SERVICE_INJECTION)
                return false;
            return p in target;
        },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0Y2gtbWV0aG9kcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9kZWNvcmF0b3JzL2hlbHBlcnMvcGF0Y2gtbWV0aG9kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVILE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHckcsTUFBTSxVQUFVLFlBQVksQ0FBSSxXQUEyQjtJQUN6RCxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0IsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDakMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzFCLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBSSxXQUEyQjtJQUNuRCxJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUM7UUFBRSxLQUFLLE1BQU0sRUFBRSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUM7WUFBRSxXQUFXLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNuSCxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBSSxXQUEyQjtJQUN6RCxJQUFJLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztRQUFFLEtBQUssTUFBTSxFQUFFLElBQUksV0FBVyxDQUFDLGNBQWMsQ0FBQztZQUFFLFdBQVcsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzVILENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBSSxXQUEyQjtJQUNoRCxJQUFJLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFBRSxLQUFLLE1BQU0sRUFBRSxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFBRSxXQUFXLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMzRyxDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsV0FBZ0IsRUFBRSxVQUEyQjtJQUNoRSxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXBELFdBQVcsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsU0FBUyxXQUFXLENBQUMsT0FBZ0IsRUFBRSxLQUFjLEVBQUUsR0FBRyxJQUFlO1FBQzNHLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDcEYsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLE1BQVcsRUFBRSxPQUFnQixFQUFFLEtBQWM7SUFDaEUsT0FBTyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7UUFDdkIsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ1gsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXhCLElBQUksS0FBSyxLQUFLLGVBQWU7Z0JBQUUsT0FBTyxPQUFPLENBQUM7WUFDOUMsSUFBSSxLQUFLLEtBQUssYUFBYTtnQkFBRSxPQUFPLEtBQUssQ0FBQztZQUUxQyxJQUFJLG1CQUFtQixDQUFDLEtBQUssQ0FBQztnQkFBRSxPQUFPLFdBQVcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRTFFLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUNEOztXQUVHO1FBQ0gsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ1gsSUFBSSxDQUFDLEtBQUssaUJBQWlCO2dCQUFFLE9BQU8sS0FBSyxDQUFDO1lBQzFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQztRQUNyQixDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVSUk9SX0hBTkRMRVJTLCBGQVNUSUZZX1JFUExZLCBGQVNUSUZZX1JFUVVFU1QsIEhBTkRMRVJTLCBIT09LUywgU0VSVklDRV9JTkpFQ1RJT04gfSBmcm9tICcuLi8uLi9zeW1ib2xzL2luZGV4LmpzJztcbmltcG9ydCB7IGhhc0Vycm9ySGFuZGxlcnMsIGhhc0hhbmRsZXJzLCBoYXNIb29rcywgaGFzU2VydmljZUluamVjdGlvbiB9IGZyb20gJy4vY2xhc3MtcHJvcGVydGllcy5qcyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3RvciB9IGZyb20gJy4vaW5qZWN0LWRlcGVuZGVuY2llcy5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRjaE1ldGhvZHM8Qz4oY29uc3RydWN0b3I6IENvbnN0cnVjdG9yPEM+KTogdm9pZCB7XG4gIHBhdGNoSGFuZGxlcnMoY29uc3RydWN0b3IpO1xuICBwYXRjaEVycm9yc0hhbmRsZXJzKGNvbnN0cnVjdG9yKTtcbiAgcGF0Y2hIb29rcyhjb25zdHJ1Y3Rvcik7XG59XG5cbmZ1bmN0aW9uIHBhdGNoSGFuZGxlcnM8Qz4oY29uc3RydWN0b3I6IENvbnN0cnVjdG9yPEM+KTogdm9pZCB7XG4gIGlmIChoYXNIYW5kbGVycyhjb25zdHJ1Y3RvcikpIGZvciAoY29uc3QgaXQgb2YgY29uc3RydWN0b3JbSEFORExFUlNdKSBwYXRjaE1ldGhvZChjb25zdHJ1Y3RvciwgaXQuaGFuZGxlck1ldGhvZCk7XG59XG5cbmZ1bmN0aW9uIHBhdGNoRXJyb3JzSGFuZGxlcnM8Qz4oY29uc3RydWN0b3I6IENvbnN0cnVjdG9yPEM+KTogdm9pZCB7XG4gIGlmIChoYXNFcnJvckhhbmRsZXJzKGNvbnN0cnVjdG9yKSkgZm9yIChjb25zdCBpdCBvZiBjb25zdHJ1Y3RvcltFUlJPUl9IQU5ETEVSU10pIHBhdGNoTWV0aG9kKGNvbnN0cnVjdG9yLCBpdC5oYW5kbGVyTmFtZSk7XG59XG5cbmZ1bmN0aW9uIHBhdGNoSG9va3M8Qz4oY29uc3RydWN0b3I6IENvbnN0cnVjdG9yPEM+KTogdm9pZCB7XG4gIGlmIChoYXNIb29rcyhjb25zdHJ1Y3RvcikpIGZvciAoY29uc3QgaXQgb2YgY29uc3RydWN0b3JbSE9PS1NdKSBwYXRjaE1ldGhvZChjb25zdHJ1Y3RvciwgaXQuaGFuZGxlck5hbWUpO1xufVxuXG5mdW5jdGlvbiBwYXRjaE1ldGhvZChjb25zdHJ1Y3RvcjogYW55LCBtZXRob2ROYW1lOiBzdHJpbmcgfCBzeW1ib2wpOiB2b2lkIHtcbiAgY29uc3QgX29yaWdpbmFsID0gY29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdO1xuXG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uIG1ldGhvZFByb3h5KHJlcXVlc3Q6IHVua25vd24sIHJlcGx5OiB1bmtub3duLCAuLi5yZXN0OiB1bmtub3duW10pIHtcbiAgICByZXR1cm4gX29yaWdpbmFsLmNhbGwoY3JlYXRlUHJveHkodGhpcywgcmVxdWVzdCwgcmVwbHkpLCByZXF1ZXN0LCByZXBseSwgLi4ucmVzdCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb3h5KHRhcmdldDogYW55LCByZXF1ZXN0OiB1bmtub3duLCByZXBseTogdW5rbm93bik6IHVua25vd24ge1xuICByZXR1cm4gbmV3IFByb3h5KHRhcmdldCwge1xuICAgIGdldCh0YXJnZXQsIHApIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGFyZ2V0W3BdO1xuXG4gICAgICBpZiAodmFsdWUgPT09IEZBU1RJRllfUkVRVUVTVCkgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICBpZiAodmFsdWUgPT09IEZBU1RJRllfUkVQTFkpIHJldHVybiByZXBseTtcblxuICAgICAgaWYgKGhhc1NlcnZpY2VJbmplY3Rpb24odmFsdWUpKSByZXR1cm4gY3JlYXRlUHJveHkodmFsdWUsIHJlcXVlc3QsIHJlcGx5KTtcblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQXZvaWQgY3JlYXRpbmcgcHJveGllcyBvdmVyIHByb3hpZXMgYnkgdGVsbGluZyB0aGF0IGFscmVhZHkgcHJveGllZCBjbGFzcyBkb2VzIG5vdCBoYXZlIGFueSBzZXJ2aWNlIGluamVjdGlvblxuICAgICAqL1xuICAgIGhhcyh0YXJnZXQsIHApOiBib29sZWFuIHtcbiAgICAgIGlmIChwID09PSBTRVJWSUNFX0lOSkVDVElPTikgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHAgaW4gdGFyZ2V0O1xuICAgIH0sXG4gIH0pO1xufVxuIl19