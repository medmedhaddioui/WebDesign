/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
import { CREATOR, ERROR_HANDLERS, HANDLERS, HOOKS } from '../../symbols/index.js';
import { ensureHandlers, hasErrorHandlers, hasHooks } from './class-properties.js';
import { createErrorsHandler } from './create-errors-handler.js';
function parseConfig(config = '/', options = {}) {
    if (typeof config === 'string')
        return { url: config, options };
    const parsed = { options, ...config };
    return {
        ...parsed,
        options: { ...parsed.options },
    };
}
const requestHandlersCache = new WeakMap();
function getTarget(Target, request, ...rest) {
    if (requestHandlersCache.has(request))
        return requestHandlersCache.get(request);
    const target = new Target(request, ...rest);
    requestHandlersCache.set(request, target);
    return target;
}
export function requestDecoratorsFactory(method) {
    return function (routeOrConfig, options) {
        const config = parseConfig(routeOrConfig, options);
        return function (target, propKey) {
            if (propKey) {
                controllerMethodDecoratorsFactory(method, config, target, propKey);
                return;
            }
            target[CREATOR] = {
                register: (instance) => {
                    if (hasHooks(target)) {
                        for (const hook of target[HOOKS]) {
                            const hookFn = (request, ...rest) => {
                                return getTarget(target, request, ...rest)[hook.handlerName](request, ...rest);
                            };
                            const option = config.options[hook.name];
                            if (option == null)
                                config.options[hook.name] = hookFn;
                            else if (Array.isArray(option))
                                option.push(hookFn);
                            else
                                config.options[hook.name] = [option, hookFn];
                        }
                    }
                    if (hasErrorHandlers(target)) {
                        config.options.errorHandler = (error, request, ...rest) => {
                            const errorsHandler = createErrorsHandler(target[ERROR_HANDLERS], getTarget(target, request, ...rest));
                            return errorsHandler(error, request, ...rest);
                        };
                    }
                    instance[method](config.url, config.options, function (request, ...rest) {
                        return getTarget(target, request, ...rest).handle();
                    });
                },
            };
        };
    };
}
export function controllerMethodDecoratorsFactory(method, config, { constructor }, propKey) {
    ensureHandlers(constructor);
    constructor[HANDLERS].push({
        url: config.url,
        method,
        options: config.options,
        handlerMethod: propKey,
    });
}
//# sourceMappingURL=data:application/json;base64,