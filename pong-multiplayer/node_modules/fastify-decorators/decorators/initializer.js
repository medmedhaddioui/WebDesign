import { INITIALIZER } from '../symbols/index.js';
import { Deferred } from '../utils/deferred.js';
export const readyMap = new Map();
export const initializersMap = new Map();
/**
 * Used to mark a Service method to be called after all the Services are created, but before the server starts
 *
 * @param dependencies The dependencies that need to be initialized before this one will be
 */
export function Initializer(dependencies = []) {
    return (targetPrototype, propertyKey) => {
        const target = targetPrototype.constructor;
        const ready = new Deferred();
        target[INITIALIZER] = (self) => {
            return Promise.all(dependencies.map((dep) => initializersMap.get(dep)))
                .then(() => self[propertyKey]())
                .then(ready.resolve)
                .catch(ready.reject);
        };
        initializersMap.set(target, ready.promise);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvZGVjb3JhdG9ycy9pbml0aWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWhELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsRUFBNkIsQ0FBQztBQUM3RCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLEVBQTZCLENBQUM7QUFFcEU7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQUMsZUFBMEIsRUFBRTtJQUN0RCxPQUFPLENBQUMsZUFBb0IsRUFBRSxXQUE0QixFQUFFLEVBQUU7UUFDNUQsTUFBTSxNQUFNLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQztRQUMzQyxNQUFNLEtBQUssR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBRTdCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQTRDLEVBQUUsRUFBRTtZQUNyRSxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUNwRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQXFCLENBQUMsRUFBRSxDQUFDO2lCQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztpQkFDbkIsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUM7UUFFRixlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElOSVRJQUxJWkVSIH0gZnJvbSAnLi4vc3ltYm9scy9pbmRleC5qcyc7XG5pbXBvcnQgeyBEZWZlcnJlZCB9IGZyb20gJy4uL3V0aWxzL2RlZmVycmVkLmpzJztcblxuZXhwb3J0IGNvbnN0IHJlYWR5TWFwID0gbmV3IE1hcDx1bmtub3duLCBQcm9taXNlPHVua25vd24+PigpO1xuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVyc01hcCA9IG5ldyBNYXA8dW5rbm93biwgUHJvbWlzZTx1bmtub3duPj4oKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hcmsgYSBTZXJ2aWNlIG1ldGhvZCB0byBiZSBjYWxsZWQgYWZ0ZXIgYWxsIHRoZSBTZXJ2aWNlcyBhcmUgY3JlYXRlZCwgYnV0IGJlZm9yZSB0aGUgc2VydmVyIHN0YXJ0c1xuICpcbiAqIEBwYXJhbSBkZXBlbmRlbmNpZXMgVGhlIGRlcGVuZGVuY2llcyB0aGF0IG5lZWQgdG8gYmUgaW5pdGlhbGl6ZWQgYmVmb3JlIHRoaXMgb25lIHdpbGwgYmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEluaXRpYWxpemVyKGRlcGVuZGVuY2llczogdW5rbm93bltdID0gW10pOiBQcm9wZXJ0eURlY29yYXRvciB7XG4gIHJldHVybiAodGFyZ2V0UHJvdG90eXBlOiBhbnksIHByb3BlcnR5S2V5OiBzdHJpbmcgfCBzeW1ib2wpID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRQcm90b3R5cGUuY29uc3RydWN0b3I7XG4gICAgY29uc3QgcmVhZHkgPSBuZXcgRGVmZXJyZWQoKTtcblxuICAgIHRhcmdldFtJTklUSUFMSVpFUl0gPSAoc2VsZjogUmVjb3JkPHR5cGVvZiBwcm9wZXJ0eUtleSwgKCkgPT4gdm9pZD4pID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChkZXBlbmRlbmNpZXMubWFwKChkZXApID0+IGluaXRpYWxpemVyc01hcC5nZXQoZGVwKSkpXG4gICAgICAgIC50aGVuKCgpID0+IHNlbGZbcHJvcGVydHlLZXkgYXMgc3RyaW5nXSgpKVxuICAgICAgICAudGhlbihyZWFkeS5yZXNvbHZlKVxuICAgICAgICAuY2F0Y2gocmVhZHkucmVqZWN0KTtcbiAgICB9O1xuXG4gICAgaW5pdGlhbGl6ZXJzTWFwLnNldCh0YXJnZXQsIHJlYWR5LnByb21pc2UpO1xuICB9O1xufVxuIl19