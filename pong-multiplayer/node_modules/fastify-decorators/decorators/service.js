/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
import { _injectablesHolder } from '../registry/_injectables-holder.js';
import { destructors } from '../registry/destructors.js';
import { CREATOR, DESTRUCTOR, INITIALIZED, INITIALIZER } from '../symbols/index.js';
import { Deferred } from '../utils/deferred.js';
import { readyMap } from './initializer.js';
export function Service(injectableToken) {
    return (target) => {
        target[CREATOR] = {
            register(classLoader) {
                var _a;
                const instance = classLoader(target);
                if (instance[INITIALIZED])
                    return instance;
                const deferred = new Deferred();
                instance[INITIALIZED] = deferred.promise;
                readyMap.set(instance, deferred.promise);
                Promise.resolve((_a = target[INITIALIZER]) === null || _a === void 0 ? void 0 : _a.call(target, instance))
                    .then(() => deferred.resolve())
                    .catch(deferred.reject);
                if (target[DESTRUCTOR])
                    destructors.set(target, target[DESTRUCTOR]);
                return instance;
            },
        };
        _injectablesHolder.injectService(target, target, false);
        if (injectableToken)
            _injectablesHolder.injectService(injectableToken, target, false);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9kZWNvcmF0b3JzL3NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBSUgsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBTzVDLE1BQU0sVUFBVSxPQUFPLENBQUMsZUFBaUM7SUFDdkQsT0FBTyxDQUFDLE1BQXlCLEVBQUUsRUFBRTtRQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUc7WUFDaEIsUUFBUSxDQUFPLFdBQXdCOztnQkFDckMsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUE4QyxNQUFNLENBQUMsQ0FBQztnQkFDbEYsSUFBSSxRQUFRLENBQUMsV0FBVyxDQUFDO29CQUFFLE9BQU8sUUFBZ0IsQ0FBQztnQkFFbkQsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztnQkFDaEMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7Z0JBQ3pDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFFekMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsK0NBQW5CLE1BQU0sRUFBZ0IsUUFBUSxDQUFDLENBQUM7cUJBQzdDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7cUJBQzlCLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRTFCLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQztvQkFBRSxXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFFcEUsT0FBTyxRQUFnQixDQUFDO1lBQzFCLENBQUM7U0FDRixDQUFDO1FBRUYsa0JBQWtCLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEQsSUFBSSxlQUFlO1lBQUUsa0JBQWtCLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEYsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbmRyZXkgQ2hhbGtpbiA8TDJqTGlnYUBnbWFpbC5jb20+IChodHRwczovL2dpdGh1Yi5jb20vTDJqTGlnYSkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL0wyakxpZ2EvZmFzdGlmeS1kZWNvcmF0b3JzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDbGFzc0xvYWRlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvYm9vdHN0cmFwLWNvbmZpZy5qcyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlU2VydmljZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvaW5qZWN0YWJsZS1jbGFzcy5qcyc7XG5pbXBvcnQgeyBfaW5qZWN0YWJsZXNIb2xkZXIgfSBmcm9tICcuLi9yZWdpc3RyeS9faW5qZWN0YWJsZXMtaG9sZGVyLmpzJztcbmltcG9ydCB7IGRlc3RydWN0b3JzIH0gZnJvbSAnLi4vcmVnaXN0cnkvZGVzdHJ1Y3RvcnMuanMnO1xuaW1wb3J0IHsgQ1JFQVRPUiwgREVTVFJVQ1RPUiwgSU5JVElBTElaRUQsIElOSVRJQUxJWkVSIH0gZnJvbSAnLi4vc3ltYm9scy9pbmRleC5qcyc7XG5pbXBvcnQgeyBEZWZlcnJlZCB9IGZyb20gJy4uL3V0aWxzL2RlZmVycmVkLmpzJztcbmltcG9ydCB7IHJlYWR5TWFwIH0gZnJvbSAnLi9pbml0aWFsaXplci5qcyc7XG5cbi8qKlxuICogRGVjb3JhdG9yIGZvciBtYWtpbmcgY2xhc3NlcyBpbmplY3RhYmxlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTZXJ2aWNlKCk6IENsYXNzRGVjb3JhdG9yO1xuZXhwb3J0IGZ1bmN0aW9uIFNlcnZpY2UoaW5qZWN0YWJsZVRva2VuOiBzdHJpbmcgfCBzeW1ib2wpOiBDbGFzc0RlY29yYXRvcjtcbmV4cG9ydCBmdW5jdGlvbiBTZXJ2aWNlKGluamVjdGFibGVUb2tlbj86IHN0cmluZyB8IHN5bWJvbCk6IHVua25vd24ge1xuICByZXR1cm4gKHRhcmdldDogSW5qZWN0YWJsZVNlcnZpY2UpID0+IHtcbiAgICB0YXJnZXRbQ1JFQVRPUl0gPSB7XG4gICAgICByZWdpc3RlcjxUeXBlPihjbGFzc0xvYWRlcjogQ2xhc3NMb2FkZXIpOiBUeXBlIHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBjbGFzc0xvYWRlcjxUeXBlICYgeyBbSU5JVElBTElaRURdPzogUHJvbWlzZTx1bmtub3duPiB9Pih0YXJnZXQpO1xuICAgICAgICBpZiAoaW5zdGFuY2VbSU5JVElBTElaRURdKSByZXR1cm4gaW5zdGFuY2UgYXMgVHlwZTtcblxuICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICBpbnN0YW5jZVtJTklUSUFMSVpFRF0gPSBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICByZWFkeU1hcC5zZXQoaW5zdGFuY2UsIGRlZmVycmVkLnByb21pc2UpO1xuXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSh0YXJnZXRbSU5JVElBTElaRVJdPy4oaW5zdGFuY2UpKVxuICAgICAgICAgIC50aGVuKCgpID0+IGRlZmVycmVkLnJlc29sdmUoKSlcbiAgICAgICAgICAuY2F0Y2goZGVmZXJyZWQucmVqZWN0KTtcblxuICAgICAgICBpZiAodGFyZ2V0W0RFU1RSVUNUT1JdKSBkZXN0cnVjdG9ycy5zZXQodGFyZ2V0LCB0YXJnZXRbREVTVFJVQ1RPUl0pO1xuXG4gICAgICAgIHJldHVybiBpbnN0YW5jZSBhcyBUeXBlO1xuICAgICAgfSxcbiAgICB9O1xuXG4gICAgX2luamVjdGFibGVzSG9sZGVyLmluamVjdFNlcnZpY2UodGFyZ2V0LCB0YXJnZXQsIGZhbHNlKTtcbiAgICBpZiAoaW5qZWN0YWJsZVRva2VuKSBfaW5qZWN0YWJsZXNIb2xkZXIuaW5qZWN0U2VydmljZShpbmplY3RhYmxlVG9rZW4sIHRhcmdldCwgZmFsc2UpO1xuICB9O1xufVxuIl19