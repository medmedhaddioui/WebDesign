/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
import { ControllerType } from '../../registry/controller-type.js';
import { ERROR_HANDLERS, HANDLERS, HOOKS } from '../../symbols/index.js';
import { hasErrorHandlers, hasHandlers, hasHooks } from '../helpers/class-properties.js';
import { createErrorsHandler } from '../helpers/create-errors-handler.js';
import { injectTagsIntoSwagger } from '../helpers/swagger-helper.js';
function targetFactory(constructor, classLoader) {
    return function getTarget(request) {
        return classLoader(constructor, request);
    };
}
/**
 * Various strategies which can be applied to controller
 *
 * @usageNotes
 *
 * There are few available strategies:
 *   SINGLETON strategy creates one instance of controller which will handle all requests
 *   REQUEST strategy will create new instance for each request/hook
 *
 * By default controllers use SINGLETON strategy
 */
export const ControllerTypeStrategies = {
    [ControllerType.SINGLETON](instance, constructor, classLoader, tags) {
        if (tags.length > 0)
            injectTagsIntoSwagger(instance, tags);
        const controllerInstance = classLoader(constructor);
        if (hasHandlers(constructor))
            registerHandlers(constructor[HANDLERS], instance, controllerInstance, tags);
        if (hasErrorHandlers(constructor))
            registerErrorHandlers(constructor[ERROR_HANDLERS], instance, controllerInstance);
        if (hasHooks(constructor))
            registerHooks(constructor[HOOKS], instance, controllerInstance);
        return controllerInstance;
    },
    [ControllerType.REQUEST](instance, constructor, classLoader, tags) {
        if (tags.length > 0)
            injectTagsIntoSwagger(instance, tags);
        const getTarget = targetFactory(constructor, classLoader);
        if (hasHandlers(constructor))
            for (const handler of constructor[HANDLERS]) {
                const { url, method, handlerMethod, options } = handler;
                instance[method](url, tags.length > 0 ? { ...options, schema: { tags: tags.map((tag) => tag.name), ...options.schema } } : options, function (request, ...args) {
                    return getTarget(request)[handlerMethod](request, ...args);
                });
            }
        if (hasErrorHandlers(constructor))
            instance.setErrorHandler((error, request, ...rest) => {
                const errorsHandler = createErrorsHandler(constructor[ERROR_HANDLERS], getTarget(request));
                return errorsHandler(error, request, ...rest);
            });
        if (hasHooks(constructor))
            for (const hook of constructor[HOOKS]) {
                instance.addHook(hook.name, (request, ...rest) => {
                    return getTarget(request)[hook.handlerName](request, ...rest);
                });
            }
    },
};
function registerHandlers(handlers, instance, controllerInstance, tags) {
    for (const handler of handlers) {
        instance[handler.method](handler.url, tags.length > 0 ? { ...handler.options, schema: { tags: tags.map((it) => it.name), ...handler.options.schema } } : handler.options, (...args) => controllerInstance[handler.handlerMethod](...args));
    }
}
function registerHooks(hooks, instance, controllerInstance) {
    for (const hook of hooks) {
        instance.addHook(hook.name, controllerInstance[hook.handlerName].bind(controllerInstance));
    }
}
function registerErrorHandlers(errorHandlers, instance, classInstance) {
    instance.setErrorHandler(createErrorsHandler(errorHandlers, classInstance));
}
//# sourceMappingURL=data:application/json;base64,