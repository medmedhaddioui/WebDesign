'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var index = require('../symbols/index.cjs');

/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
class _InjectablesHolder {
    constructor() {
        this.reset();
    }
    injectService(token, service, userProvided = true) {
        this.verifyInjectable(service);
        if (userProvided)
            this.userProvided.set(token, service);
        else
            this.autoGenerated.set(token, service);
    }
    injectSingleton(token, singleton, userProvided = true) {
        if (userProvided)
            this.userProvided.set(token, this.wrapSingleton(singleton));
        else
            this.autoGenerated.set(token, this.wrapSingleton(singleton));
    }
    has(token) {
        return this.userProvided.has(token) || this.autoGenerated.has(token);
    }
    get(token) {
        if (this.userProvided.has(token))
            return this.userProvided.get(token);
        if (this.autoGenerated.has(token))
            return this.autoGenerated.get(token);
    }
    getSingleton(token) {
        const mayBeSingleton = this.get(token);
        const loader = (() => {
            /* no-op */
        });
        return mayBeSingleton === null || mayBeSingleton === void 0 ? void 0 : mayBeSingleton[index.CREATOR].register(loader);
    }
    reset() {
        this.autoGenerated = new Map([
            [index.FastifyRequestToken, this.wrapSingleton(index.FASTIFY_REQUEST)],
            [index.FastifyReplyToken, this.wrapSingleton(index.FASTIFY_REPLY)],
        ]);
        this.userProvided = new Map();
    }
    *entries() {
        yield* this.autoGenerated.entries();
        yield* this.userProvided.entries();
    }
    verifyInjectable(injectable) {
        if (typeof injectable !== 'function')
            throw new Error(`Injectable service expected, got ${typeof injectable}`);
        if (!(index.CREATOR in injectable)) {
            throw new Error(`Injectable service expected, got ${injectable.name}`);
        }
    }
    wrapSingleton(object) {
        return {
            [index.CREATOR]: {
                register(classLoader) {
                    return object;
                },
            },
        };
    }
}
const _injectablesHolder = new _InjectablesHolder();

exports._InjectablesHolder = _InjectablesHolder;
exports._injectablesHolder = _injectablesHolder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbbnVsbF0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsifQ==
