/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
import { InjectableService } from '../interfaces/injectable-class.js';
export declare type InjectablesMap = Map<string | symbol | unknown, InjectableService>;
export declare class _InjectablesHolder {
    userProvided: InjectablesMap;
    autoGenerated: InjectablesMap;
    constructor();
    injectService(token: unknown, service: unknown, userProvided?: boolean): void;
    injectSingleton(token: unknown, singleton: unknown, userProvided?: boolean): void;
    has(token: unknown): boolean;
    get(token: unknown): InjectableService | undefined;
    getSingleton<T>(token: unknown): T | undefined;
    reset(): void;
    entries(): IterableIterator<[
        unknown,
        InjectableService
    ]>;
    verifyInjectable(injectable: unknown): asserts injectable is InjectableService;
    wrapSingleton<T>(object: T): InjectableService;
}
export declare const _injectablesHolder: _InjectablesHolder;
