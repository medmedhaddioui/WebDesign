/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
import { CREATOR, FASTIFY_REPLY, FASTIFY_REQUEST, FastifyReplyToken, FastifyRequestToken } from '../symbols/index.js';
export class _InjectablesHolder {
    constructor() {
        this.reset();
    }
    injectService(token, service, userProvided = true) {
        this.verifyInjectable(service);
        if (userProvided)
            this.userProvided.set(token, service);
        else
            this.autoGenerated.set(token, service);
    }
    injectSingleton(token, singleton, userProvided = true) {
        if (userProvided)
            this.userProvided.set(token, this.wrapSingleton(singleton));
        else
            this.autoGenerated.set(token, this.wrapSingleton(singleton));
    }
    has(token) {
        return this.userProvided.has(token) || this.autoGenerated.has(token);
    }
    get(token) {
        if (this.userProvided.has(token))
            return this.userProvided.get(token);
        if (this.autoGenerated.has(token))
            return this.autoGenerated.get(token);
    }
    getSingleton(token) {
        const mayBeSingleton = this.get(token);
        const loader = (() => {
            /* no-op */
        });
        return mayBeSingleton === null || mayBeSingleton === void 0 ? void 0 : mayBeSingleton[CREATOR].register(loader);
    }
    reset() {
        this.autoGenerated = new Map([
            [FastifyRequestToken, this.wrapSingleton(FASTIFY_REQUEST)],
            [FastifyReplyToken, this.wrapSingleton(FASTIFY_REPLY)],
        ]);
        this.userProvided = new Map();
    }
    *entries() {
        yield* this.autoGenerated.entries();
        yield* this.userProvided.entries();
    }
    verifyInjectable(injectable) {
        if (typeof injectable !== 'function')
            throw new Error(`Injectable service expected, got ${typeof injectable}`);
        if (!(CREATOR in injectable)) {
            throw new Error(`Injectable service expected, got ${injectable.name}`);
        }
    }
    wrapSingleton(object) {
        return {
            [CREATOR]: {
                register(classLoader) {
                    return object;
                },
            },
        };
    }
}
export const _injectablesHolder = new _InjectablesHolder();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2luamVjdGFibGVzLWhvbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9yZWdpc3RyeS9faW5qZWN0YWJsZXMtaG9sZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUlILE9BQU8sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBSXRILE1BQU0sT0FBTyxrQkFBa0I7SUFHN0I7UUFDRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQWMsRUFBRSxPQUFnQixFQUFFLFlBQVksR0FBRyxJQUFJO1FBQ2pFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvQixJQUFJLFlBQVk7WUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7O1lBQ25ELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQWMsRUFBRSxTQUFrQixFQUFFLFlBQVksR0FBRyxJQUFJO1FBQ3JFLElBQUksWUFBWTtZQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7O1lBQ3pFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELEdBQUcsQ0FBQyxLQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELEdBQUcsQ0FBQyxLQUFjO1FBQ2hCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQUUsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0RSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztZQUFFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELFlBQVksQ0FBSSxLQUFjO1FBQzVCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdkMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDbkIsV0FBVztRQUNiLENBQUMsQ0FBZ0IsQ0FBQztRQUNsQixPQUFPLGNBQWMsYUFBZCxjQUFjLHVCQUFkLGNBQWMsQ0FBRyxPQUFPLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBQztZQUMzQixDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDMUQsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3ZELENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsQ0FBQyxPQUFPO1FBQ04sS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNwQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxVQUFtQjtRQUNsQyxJQUFJLE9BQU8sVUFBVSxLQUFLLFVBQVU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxPQUFPLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDL0csSUFBSSxDQUFDLENBQUMsT0FBTyxJQUFJLFVBQVUsQ0FBQyxFQUFFO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3hFO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBSSxNQUFTO1FBQ3hCLE9BQTBCO1lBQ3hCLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1QsUUFBUSxDQUFDLFdBQXdCO29CQUMvQixPQUFPLE1BQU0sQ0FBQztnQkFDaEIsQ0FBQzthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbmRyZXkgQ2hhbGtpbiA8TDJqTGlnYUBnbWFpbC5jb20+IChodHRwczovL2dpdGh1Yi5jb20vTDJqTGlnYSkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL0wyakxpZ2EvZmFzdGlmeS1kZWNvcmF0b3JzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBDbGFzc0xvYWRlciB9IGZyb20gJy4uL2ludGVyZmFjZXMvYm9vdHN0cmFwLWNvbmZpZy5qcyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlU2VydmljZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvaW5qZWN0YWJsZS1jbGFzcy5qcyc7XG5pbXBvcnQgeyBDUkVBVE9SLCBGQVNUSUZZX1JFUExZLCBGQVNUSUZZX1JFUVVFU1QsIEZhc3RpZnlSZXBseVRva2VuLCBGYXN0aWZ5UmVxdWVzdFRva2VuIH0gZnJvbSAnLi4vc3ltYm9scy9pbmRleC5qcyc7XG5cbmV4cG9ydCB0eXBlIEluamVjdGFibGVzTWFwID0gTWFwPHN0cmluZyB8IHN5bWJvbCB8IHVua25vd24sIEluamVjdGFibGVTZXJ2aWNlPjtcblxuZXhwb3J0IGNsYXNzIF9JbmplY3RhYmxlc0hvbGRlciB7XG4gIGRlY2xhcmUgdXNlclByb3ZpZGVkOiBJbmplY3RhYmxlc01hcDtcbiAgZGVjbGFyZSBhdXRvR2VuZXJhdGVkOiBJbmplY3RhYmxlc01hcDtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgaW5qZWN0U2VydmljZSh0b2tlbjogdW5rbm93biwgc2VydmljZTogdW5rbm93biwgdXNlclByb3ZpZGVkID0gdHJ1ZSk6IHZvaWQge1xuICAgIHRoaXMudmVyaWZ5SW5qZWN0YWJsZShzZXJ2aWNlKTtcblxuICAgIGlmICh1c2VyUHJvdmlkZWQpIHRoaXMudXNlclByb3ZpZGVkLnNldCh0b2tlbiwgc2VydmljZSk7XG4gICAgZWxzZSB0aGlzLmF1dG9HZW5lcmF0ZWQuc2V0KHRva2VuLCBzZXJ2aWNlKTtcbiAgfVxuXG4gIGluamVjdFNpbmdsZXRvbih0b2tlbjogdW5rbm93biwgc2luZ2xldG9uOiB1bmtub3duLCB1c2VyUHJvdmlkZWQgPSB0cnVlKTogdm9pZCB7XG4gICAgaWYgKHVzZXJQcm92aWRlZCkgdGhpcy51c2VyUHJvdmlkZWQuc2V0KHRva2VuLCB0aGlzLndyYXBTaW5nbGV0b24oc2luZ2xldG9uKSk7XG4gICAgZWxzZSB0aGlzLmF1dG9HZW5lcmF0ZWQuc2V0KHRva2VuLCB0aGlzLndyYXBTaW5nbGV0b24oc2luZ2xldG9uKSk7XG4gIH1cblxuICBoYXModG9rZW46IHVua25vd24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy51c2VyUHJvdmlkZWQuaGFzKHRva2VuKSB8fCB0aGlzLmF1dG9HZW5lcmF0ZWQuaGFzKHRva2VuKTtcbiAgfVxuXG4gIGdldCh0b2tlbjogdW5rbm93bik6IEluamVjdGFibGVTZXJ2aWNlIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy51c2VyUHJvdmlkZWQuaGFzKHRva2VuKSkgcmV0dXJuIHRoaXMudXNlclByb3ZpZGVkLmdldCh0b2tlbik7XG4gICAgaWYgKHRoaXMuYXV0b0dlbmVyYXRlZC5oYXModG9rZW4pKSByZXR1cm4gdGhpcy5hdXRvR2VuZXJhdGVkLmdldCh0b2tlbik7XG4gIH1cblxuICBnZXRTaW5nbGV0b248VD4odG9rZW46IHVua25vd24pOiBUIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBtYXlCZVNpbmdsZXRvbiA9IHRoaXMuZ2V0KHRva2VuKTtcblxuICAgIGNvbnN0IGxvYWRlciA9ICgoKSA9PiB7XG4gICAgICAvKiBuby1vcCAqL1xuICAgIH0pIGFzIENsYXNzTG9hZGVyO1xuICAgIHJldHVybiBtYXlCZVNpbmdsZXRvbj8uW0NSRUFUT1JdLnJlZ2lzdGVyKGxvYWRlcik7XG4gIH1cblxuICByZXNldCgpOiB2b2lkIHtcbiAgICB0aGlzLmF1dG9HZW5lcmF0ZWQgPSBuZXcgTWFwKFtcbiAgICAgIFtGYXN0aWZ5UmVxdWVzdFRva2VuLCB0aGlzLndyYXBTaW5nbGV0b24oRkFTVElGWV9SRVFVRVNUKV0sXG4gICAgICBbRmFzdGlmeVJlcGx5VG9rZW4sIHRoaXMud3JhcFNpbmdsZXRvbihGQVNUSUZZX1JFUExZKV0sXG4gICAgXSk7XG4gICAgdGhpcy51c2VyUHJvdmlkZWQgPSBuZXcgTWFwKCk7XG4gIH1cblxuICAqZW50cmllcygpOiBJdGVyYWJsZUl0ZXJhdG9yPFt1bmtub3duLCBJbmplY3RhYmxlU2VydmljZV0+IHtcbiAgICB5aWVsZCogdGhpcy5hdXRvR2VuZXJhdGVkLmVudHJpZXMoKTtcbiAgICB5aWVsZCogdGhpcy51c2VyUHJvdmlkZWQuZW50cmllcygpO1xuICB9XG5cbiAgdmVyaWZ5SW5qZWN0YWJsZShpbmplY3RhYmxlOiB1bmtub3duKTogYXNzZXJ0cyBpbmplY3RhYmxlIGlzIEluamVjdGFibGVTZXJ2aWNlIHtcbiAgICBpZiAodHlwZW9mIGluamVjdGFibGUgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcihgSW5qZWN0YWJsZSBzZXJ2aWNlIGV4cGVjdGVkLCBnb3QgJHt0eXBlb2YgaW5qZWN0YWJsZX1gKTtcbiAgICBpZiAoIShDUkVBVE9SIGluIGluamVjdGFibGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEluamVjdGFibGUgc2VydmljZSBleHBlY3RlZCwgZ290ICR7aW5qZWN0YWJsZS5uYW1lfWApO1xuICAgIH1cbiAgfVxuXG4gIHdyYXBTaW5nbGV0b248VD4ob2JqZWN0OiBUKTogSW5qZWN0YWJsZVNlcnZpY2Uge1xuICAgIHJldHVybiA8SW5qZWN0YWJsZVNlcnZpY2U+e1xuICAgICAgW0NSRUFUT1JdOiB7XG4gICAgICAgIHJlZ2lzdGVyKGNsYXNzTG9hZGVyOiBDbGFzc0xvYWRlcikge1xuICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IF9pbmplY3RhYmxlc0hvbGRlciA9IG5ldyBfSW5qZWN0YWJsZXNIb2xkZXIoKTtcbiJdfQ==