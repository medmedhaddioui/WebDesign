'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fastify = require('fastify');
var classProperties = require('../decorators/helpers/class-properties.cjs');
var dependencyScope = require('../decorators/helpers/dependency-scope.cjs');
var injectDependencies = require('../decorators/helpers/inject-dependencies.cjs');
require('../decorators/index.cjs');
var _injectablesHolder = require('../registry/_injectables-holder.cjs');
var index = require('../symbols/index.cjs');
var fastifyPlugins = require('./fastify-plugins.cjs');
var mocksManager = require('./mocks-manager.cjs');
var initializer = require('../decorators/initializer.cjs');

/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
async function configureControllerTest(config) {
    var _a;
    const instance = (_a = config.instance) !== null && _a !== void 0 ? _a : fastify.fastify();
    fastifyPlugins.loadPlugins(instance, config.plugins);
    const injectablesWithMocks = mocksManager.MocksManager.create(_injectablesHolder._injectablesHolder, config.mocks);
    if (!injectablesWithMocks.has(index.FastifyInstanceToken)) {
        injectablesWithMocks.injectSingleton(index.FastifyInstanceToken, instance, false);
    }
    const classLoader = injectDependencies.classLoaderFactory(injectablesWithMocks);
    classLoader.reset(dependencyScope.defaultScope);
    if (!instance.hasDecorator(index.CLASS_LOADER))
        instance.decorate(index.CLASS_LOADER, classLoader);
    const controller = config.controller;
    const controllerInstance = await controller[index.CREATOR].register(instance, '', classLoader);
    instance.decorate('controller', controllerInstance);
    await Promise.all([...getInjectedProps(controller), ...getInjectedProps(controller.prototype), ...getConstructorArgs(controller)]
        .map((value) => injectablesWithMocks.get(value))
        .map((it) => initializer.readyMap.get(it)));
    await instance.ready();
    // @ts-expect-error we have decorated instance, TypeScript can't handle it :(
    return instance;
}
function* getInjectedProps(target) {
    if (!classProperties.hasServiceInjection(target))
        return [];
    for (const value of target[index.SERVICE_INJECTION])
        yield value.name;
}
function getConstructorArgs(constructor) {
    return Reflect.getMetadata('design:paramtypes', constructor) || [];
}

exports.configureControllerTest = configureControllerTest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbbnVsbF0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsNENBQTJDO0FBQ3pFLDhCQUE4Qiw0Q0FBMkM7QUFDekUsaUNBQWlDLCtDQUE4QztBQUMvRSxRQUFRLHlCQUF3QjtBQUNoQyxpQ0FBaUMscUNBQW9DO0FBQ3JFLG9CQUFvQixzQkFBcUI7QUFDekMsNkJBQTZCLHVCQUFzQjtBQUNuRCwyQkFBMkIscUJBQW9CO0FBQy9DLDBCQUEwQiwrQkFBOEI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsifQ==
