/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
import { fastify } from 'fastify';
import { hasServiceInjection } from '../decorators/helpers/class-properties.js';
import { defaultScope } from '../decorators/helpers/dependency-scope.js';
import { classLoaderFactory } from '../decorators/helpers/inject-dependencies.js';
import { readyMap } from '../decorators/index.js';
import { _injectablesHolder } from '../registry/_injectables-holder.js';
import { CLASS_LOADER, CREATOR, FastifyInstanceToken, SERVICE_INJECTION } from '../symbols/index.js';
import { loadPlugins } from './fastify-plugins.js';
import { MocksManager } from './mocks-manager.js';
export async function configureControllerTest(config) {
    var _a;
    const instance = (_a = config.instance) !== null && _a !== void 0 ? _a : fastify();
    loadPlugins(instance, config.plugins);
    const injectablesWithMocks = MocksManager.create(_injectablesHolder, config.mocks);
    if (!injectablesWithMocks.has(FastifyInstanceToken)) {
        injectablesWithMocks.injectSingleton(FastifyInstanceToken, instance, false);
    }
    const classLoader = classLoaderFactory(injectablesWithMocks);
    classLoader.reset(defaultScope);
    if (!instance.hasDecorator(CLASS_LOADER))
        instance.decorate(CLASS_LOADER, classLoader);
    const controller = config.controller;
    const controllerInstance = await controller[CREATOR].register(instance, '', classLoader);
    instance.decorate('controller', controllerInstance);
    await Promise.all([...getInjectedProps(controller), ...getInjectedProps(controller.prototype), ...getConstructorArgs(controller)]
        .map((value) => injectablesWithMocks.get(value))
        .map((it) => readyMap.get(it)));
    await instance.ready();
    // @ts-expect-error we have decorated instance, TypeScript can't handle it :(
    return instance;
}
function* getInjectedProps(target) {
    if (!hasServiceInjection(target))
        return [];
    for (const value of target[SERVICE_INJECTION])
        yield value.name;
}
function getConstructorArgs(constructor) {
    return Reflect.getMetadata('design:paramtypes', constructor) || [];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlLWNvbnRyb2xsZXItdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi90ZXN0aW5nL2NvbmZpZ3VyZS1jb250cm9sbGVyLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFFLE9BQU8sRUFBbUIsTUFBTSxTQUFTLENBQUM7QUFDbkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDaEYsT0FBTyxFQUFFLFlBQVksRUFBbUIsTUFBTSwyQ0FBMkMsQ0FBQztBQUMxRixPQUFPLEVBQUUsa0JBQWtCLEVBQWlDLE1BQU0sOENBQThDLENBQUM7QUFDakgsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBSWxELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckcsT0FBTyxFQUFFLFdBQVcsRUFBVyxNQUFNLHNCQUFzQixDQUFDO0FBQzVELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQWlCbEQsTUFBTSxDQUFDLEtBQUssVUFBVSx1QkFBdUIsQ0FBSSxNQUE0Qzs7SUFDM0YsTUFBTSxRQUFRLEdBQUcsTUFBQSxNQUFNLENBQUMsUUFBUSxtQ0FBSSxPQUFPLEVBQUUsQ0FBQztJQUM5QyxXQUFXLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV0QyxNQUFNLG9CQUFvQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25GLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsRUFBRTtRQUNuRCxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzdFO0lBRUQsTUFBTSxXQUFXLEdBQUcsa0JBQWtCLENBQUMsb0JBQW9CLENBQTBELENBQUM7SUFDdEgsV0FBVyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUM7UUFBRSxRQUFRLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUMsQ0FBQztJQUV2RixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBa0MsQ0FBQztJQUM3RCxNQUFNLGtCQUFrQixHQUFHLE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3pGLFFBQVEsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFFcEQsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNmLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRSxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzVHLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQy9DLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNqQyxDQUFDO0lBRUYsTUFBTSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFdkIsNkVBQTZFO0lBQzdFLE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUM7QUFFRCxRQUFRLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFlO0lBQ3hDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUM7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUM1QyxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztRQUFFLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQztBQUNsRSxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxXQUE0QjtJQUN0RCxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ3JFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQW5kcmV5IENoYWxraW4gPEwyakxpZ2FAZ21haWwuY29tPiAoaHR0cHM6Ly9naXRodWIuY29tL0wyakxpZ2EpLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9MMmpMaWdhL2Zhc3RpZnktZGVjb3JhdG9ycy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxuaW1wb3J0IHsgZmFzdGlmeSwgRmFzdGlmeUluc3RhbmNlIH0gZnJvbSAnZmFzdGlmeSc7XG5pbXBvcnQgeyBoYXNTZXJ2aWNlSW5qZWN0aW9uIH0gZnJvbSAnLi4vZGVjb3JhdG9ycy9oZWxwZXJzL2NsYXNzLXByb3BlcnRpZXMuanMnO1xuaW1wb3J0IHsgZGVmYXVsdFNjb3BlLCBEZXBlbmRlbmN5U2NvcGUgfSBmcm9tICcuLi9kZWNvcmF0b3JzL2hlbHBlcnMvZGVwZW5kZW5jeS1zY29wZS5qcyc7XG5pbXBvcnQgeyBjbGFzc0xvYWRlckZhY3RvcnksIENvbnN0cnVjdG9yLCBTZXJ2aWNlSW5qZWN0aW9uIH0gZnJvbSAnLi4vZGVjb3JhdG9ycy9oZWxwZXJzL2luamVjdC1kZXBlbmRlbmNpZXMuanMnO1xuaW1wb3J0IHsgcmVhZHlNYXAgfSBmcm9tICcuLi9kZWNvcmF0b3JzL2luZGV4LmpzJztcbmltcG9ydCB7IENsYXNzTG9hZGVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9ib290c3RyYXAtY29uZmlnLmpzJztcbmltcG9ydCB0eXBlIHsgSW5qZWN0YWJsZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2luZGV4LmpzJztcbmltcG9ydCB0eXBlIHsgSW5qZWN0YWJsZUNsYXNzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9pbmplY3RhYmxlLWNsYXNzLmpzJztcbmltcG9ydCB7IF9pbmplY3RhYmxlc0hvbGRlciB9IGZyb20gJy4uL3JlZ2lzdHJ5L19pbmplY3RhYmxlcy1ob2xkZXIuanMnO1xuaW1wb3J0IHsgQ0xBU1NfTE9BREVSLCBDUkVBVE9SLCBGYXN0aWZ5SW5zdGFuY2VUb2tlbiwgU0VSVklDRV9JTkpFQ1RJT04gfSBmcm9tICcuLi9zeW1ib2xzL2luZGV4LmpzJztcbmltcG9ydCB7IGxvYWRQbHVnaW5zLCBQbHVnaW5zIH0gZnJvbSAnLi9mYXN0aWZ5LXBsdWdpbnMuanMnO1xuaW1wb3J0IHsgTW9ja3NNYW5hZ2VyIH0gZnJvbSAnLi9tb2Nrcy1tYW5hZ2VyLmpzJztcbmltcG9ydCB0eXBlIHsgU2VydmljZU1vY2sgfSBmcm9tICcuL3NlcnZpY2UtbW9jay5qcyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXG5kZWNsYXJlIG5hbWVzcGFjZSBSZWZsZWN0IHtcbiAgZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXk6ICdkZXNpZ246cGFyYW10eXBlcycsIHRhcmdldDogdW5rbm93bik6IFNlcnZpY2VJbmplY3Rpb25bJ25hbWUnXVtdIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyb2xsZXJUZXN0Q29uZmlnPEM+IHtcbiAgY29udHJvbGxlcjogQztcbiAgaW5zdGFuY2U/OiBGYXN0aWZ5SW5zdGFuY2U7XG4gIG1vY2tzPzogU2VydmljZU1vY2tbXTtcbiAgcGx1Z2lucz86IFBsdWdpbnM7XG59XG5cbmV4cG9ydCB0eXBlIEZhc3RpZnlJbnN0YW5jZVdpdGhDb250cm9sbGVyPEM+ID0gRmFzdGlmeUluc3RhbmNlICYgUGljazxDb250cm9sbGVyVGVzdENvbmZpZzxDPiwgJ2NvbnRyb2xsZXInPjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbmZpZ3VyZUNvbnRyb2xsZXJUZXN0PEM+KGNvbmZpZzogQ29udHJvbGxlclRlc3RDb25maWc8Q29uc3RydWN0b3I8Qz4+KTogUHJvbWlzZTxGYXN0aWZ5SW5zdGFuY2VXaXRoQ29udHJvbGxlcjxDPj4ge1xuICBjb25zdCBpbnN0YW5jZSA9IGNvbmZpZy5pbnN0YW5jZSA/PyBmYXN0aWZ5KCk7XG4gIGxvYWRQbHVnaW5zKGluc3RhbmNlLCBjb25maWcucGx1Z2lucyk7XG5cbiAgY29uc3QgaW5qZWN0YWJsZXNXaXRoTW9ja3MgPSBNb2Nrc01hbmFnZXIuY3JlYXRlKF9pbmplY3RhYmxlc0hvbGRlciwgY29uZmlnLm1vY2tzKTtcbiAgaWYgKCFpbmplY3RhYmxlc1dpdGhNb2Nrcy5oYXMoRmFzdGlmeUluc3RhbmNlVG9rZW4pKSB7XG4gICAgaW5qZWN0YWJsZXNXaXRoTW9ja3MuaW5qZWN0U2luZ2xldG9uKEZhc3RpZnlJbnN0YW5jZVRva2VuLCBpbnN0YW5jZSwgZmFsc2UpO1xuICB9XG5cbiAgY29uc3QgY2xhc3NMb2FkZXIgPSBjbGFzc0xvYWRlckZhY3RvcnkoaW5qZWN0YWJsZXNXaXRoTW9ja3MpIGFzIENsYXNzTG9hZGVyICYgeyByZXNldChzY29wZTogRGVwZW5kZW5jeVNjb3BlKTogdm9pZCB9O1xuICBjbGFzc0xvYWRlci5yZXNldChkZWZhdWx0U2NvcGUpO1xuICBpZiAoIWluc3RhbmNlLmhhc0RlY29yYXRvcihDTEFTU19MT0FERVIpKSBpbnN0YW5jZS5kZWNvcmF0ZShDTEFTU19MT0FERVIsIGNsYXNzTG9hZGVyKTtcblxuICBjb25zdCBjb250cm9sbGVyID0gY29uZmlnLmNvbnRyb2xsZXIgYXMgSW5qZWN0YWJsZUNvbnRyb2xsZXI7XG4gIGNvbnN0IGNvbnRyb2xsZXJJbnN0YW5jZSA9IGF3YWl0IGNvbnRyb2xsZXJbQ1JFQVRPUl0ucmVnaXN0ZXIoaW5zdGFuY2UsICcnLCBjbGFzc0xvYWRlcik7XG4gIGluc3RhbmNlLmRlY29yYXRlKCdjb250cm9sbGVyJywgY29udHJvbGxlckluc3RhbmNlKTtcblxuICBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBbLi4uZ2V0SW5qZWN0ZWRQcm9wcyhjb250cm9sbGVyKSwgLi4uZ2V0SW5qZWN0ZWRQcm9wcyhjb250cm9sbGVyLnByb3RvdHlwZSksIC4uLmdldENvbnN0cnVjdG9yQXJncyhjb250cm9sbGVyKV1cbiAgICAgIC5tYXAoKHZhbHVlKSA9PiBpbmplY3RhYmxlc1dpdGhNb2Nrcy5nZXQodmFsdWUpKVxuICAgICAgLm1hcCgoaXQpID0+IHJlYWR5TWFwLmdldChpdCkpLFxuICApO1xuXG4gIGF3YWl0IGluc3RhbmNlLnJlYWR5KCk7XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciB3ZSBoYXZlIGRlY29yYXRlZCBpbnN0YW5jZSwgVHlwZVNjcmlwdCBjYW4ndCBoYW5kbGUgaXQgOihcbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG5mdW5jdGlvbiogZ2V0SW5qZWN0ZWRQcm9wcyh0YXJnZXQ6IHVua25vd24pOiBJdGVyYWJsZTx1bmtub3duPiB7XG4gIGlmICghaGFzU2VydmljZUluamVjdGlvbih0YXJnZXQpKSByZXR1cm4gW107XG4gIGZvciAoY29uc3QgdmFsdWUgb2YgdGFyZ2V0W1NFUlZJQ0VfSU5KRUNUSU9OXSkgeWllbGQgdmFsdWUubmFtZTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29uc3RydWN0b3JBcmdzKGNvbnN0cnVjdG9yOiBJbmplY3RhYmxlQ2xhc3MpOiBBcnJheTx1bmtub3duPiB7XG4gIHJldHVybiBSZWZsZWN0LmdldE1ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIGNvbnN0cnVjdG9yKSB8fCBbXTtcbn1cbiJdfQ==