/**
 * @license
 * Copyright Andrey Chalkin <L2jLiga@gmail.com> (https://github.com/L2jLiga). All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/L2jLiga/fastify-decorators/blob/master/LICENSE
 */
import { fastify } from 'fastify';
import { defaultScope } from '../decorators/helpers/dependency-scope.js';
import { classLoaderFactory } from '../decorators/helpers/inject-dependencies.js';
import { initializersMap } from '../decorators/initializer.js';
import { _injectablesHolder } from '../registry/_injectables-holder.js';
import { CLASS_LOADER, CREATOR, FastifyInstanceToken, INITIALIZER } from '../symbols/index.js';
import { loadPlugins } from './fastify-plugins.js';
import { MocksManager } from './mocks-manager.js';
/**
 * Configures service for testing
 * @param config with service and mocks
 * @returns configured service & promise which resolves when async initializer done (if it exists, otherwise resolved)
 */
export function configureServiceTest(config) {
    const service = config.service;
    isInjectable(service);
    const injectablesWithMocks = MocksManager.create(_injectablesHolder, config.mocks);
    if (config.instance)
        injectablesWithMocks.injectSingleton(FastifyInstanceToken, config.instance);
    if (!injectablesWithMocks.has(FastifyInstanceToken))
        injectablesWithMocks.injectSingleton(FastifyInstanceToken, fastify(), false);
    const fastifyInstance = injectablesWithMocks.getSingleton(FastifyInstanceToken);
    const classLoader = classLoaderFactory(injectablesWithMocks);
    classLoader.reset(defaultScope);
    if (!fastifyInstance.hasDecorator(CLASS_LOADER))
        fastifyInstance.decorate(CLASS_LOADER, classLoader);
    loadPlugins(fastifyInstance, config.plugins);
    const instance = service[CREATOR].register(classLoader);
    let promise = null;
    // @ts-expect-error TS doesn't know that we have class instance here
    return new Proxy(instance, {
        get(target, p) {
            if (p === 'then' || p === 'catch' || p === 'finally') {
                if (promise == null)
                    promise = hasAsyncInitializer(service)
                        ? // @ts-expect-error if service has async initializer then it exists in readyMap
                            initializersMap.get(service).then(() => target)
                        : Promise.resolve(target);
                return promise[p].bind(promise);
            }
            return target[p];
        },
    });
}
function isInjectable(service) {
    if (!(CREATOR in service)) {
        throw new Error('Provided service does not annotated with @Service!');
    }
}
function hasAsyncInitializer(service) {
    return INITIALIZER in service;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlLXNlcnZpY2UtdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi90ZXN0aW5nL2NvbmZpZ3VyZS1zZXJ2aWNlLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBRUgsT0FBTyxFQUFFLE9BQU8sRUFBbUIsTUFBTSxTQUFTLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBbUIsTUFBTSwyQ0FBMkMsQ0FBQztBQUUxRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUNsRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFHL0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0YsT0FBTyxFQUFFLFdBQVcsRUFBVyxNQUFNLHNCQUFzQixDQUFDO0FBQzVELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQVVsRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFVLE1BQWtDO0lBQzlFLE1BQU0sT0FBTyxHQUF5QixNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ3JELFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV0QixNQUFNLG9CQUFvQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25GLElBQUksTUFBTSxDQUFDLFFBQVE7UUFBRSxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7UUFBRSxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFbEksTUFBTSxlQUFlLEdBQUcsb0JBQW9CLENBQUMsWUFBWSxDQUFrQixvQkFBb0IsQ0FBb0IsQ0FBQztJQUNwSCxNQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBMEQsQ0FBQztJQUN0SCxXQUFXLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztRQUFFLGVBQWUsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBRXJHLFdBQVcsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTdDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQVUsV0FBVyxDQUFDLENBQUM7SUFFakUsSUFBSSxPQUFPLEdBQTRCLElBQUksQ0FBQztJQUU1QyxvRUFBb0U7SUFDcEUsT0FBTyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7UUFDekIsR0FBRyxDQUFJLE1BQVMsRUFBRSxDQUF5QztZQUN6RCxJQUFJLENBQUMsS0FBSyxNQUFNLElBQUksQ0FBQyxLQUFLLE9BQU8sSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO2dCQUNwRCxJQUFJLE9BQU8sSUFBSSxJQUFJO29CQUNqQixPQUFPLEdBQUcsbUJBQW1CLENBQUMsT0FBTyxDQUFDO3dCQUNwQyxDQUFDLENBQUMsK0VBQStFOzRCQUMvRSxlQUFlLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7d0JBQ2pELENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUU5QixPQUFPLE9BQU8sQ0FBQyxDQUFpQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2pFO1lBRUQsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsQ0FBQztLQUNGLENBQStCLENBQUM7QUFDbkMsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFVLE9BQTZCO0lBQzFELElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsRUFBRTtRQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7S0FDdkU7QUFDSCxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxPQUEwQjtJQUNyRCxPQUFPLFdBQVcsSUFBSSxPQUFPLENBQUM7QUFDaEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBbmRyZXkgQ2hhbGtpbiA8TDJqTGlnYUBnbWFpbC5jb20+IChodHRwczovL2dpdGh1Yi5jb20vTDJqTGlnYSkuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL0wyakxpZ2EvZmFzdGlmeS1kZWNvcmF0b3JzL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuXG5pbXBvcnQgeyBmYXN0aWZ5LCBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tICdmYXN0aWZ5JztcbmltcG9ydCB7IGRlZmF1bHRTY29wZSwgRGVwZW5kZW5jeVNjb3BlIH0gZnJvbSAnLi4vZGVjb3JhdG9ycy9oZWxwZXJzL2RlcGVuZGVuY3ktc2NvcGUuanMnO1xuaW1wb3J0IHR5cGUgeyBDb25zdHJ1Y3RvciB9IGZyb20gJy4uL2RlY29yYXRvcnMvaGVscGVycy9pbmplY3QtZGVwZW5kZW5jaWVzLmpzJztcbmltcG9ydCB7IGNsYXNzTG9hZGVyRmFjdG9yeSB9IGZyb20gJy4uL2RlY29yYXRvcnMvaGVscGVycy9pbmplY3QtZGVwZW5kZW5jaWVzLmpzJztcbmltcG9ydCB7IGluaXRpYWxpemVyc01hcCB9IGZyb20gJy4uL2RlY29yYXRvcnMvaW5pdGlhbGl6ZXIuanMnO1xuaW1wb3J0IHsgQ2xhc3NMb2FkZXIgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2Jvb3RzdHJhcC1jb25maWcuanMnO1xuaW1wb3J0IHR5cGUgeyBJbmplY3RhYmxlU2VydmljZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvaW5qZWN0YWJsZS1jbGFzcy5qcyc7XG5pbXBvcnQgeyBfaW5qZWN0YWJsZXNIb2xkZXIgfSBmcm9tICcuLi9yZWdpc3RyeS9faW5qZWN0YWJsZXMtaG9sZGVyLmpzJztcbmltcG9ydCB7IENMQVNTX0xPQURFUiwgQ1JFQVRPUiwgRmFzdGlmeUluc3RhbmNlVG9rZW4sIElOSVRJQUxJWkVSIH0gZnJvbSAnLi4vc3ltYm9scy9pbmRleC5qcyc7XG5pbXBvcnQgeyBsb2FkUGx1Z2lucywgUGx1Z2lucyB9IGZyb20gJy4vZmFzdGlmeS1wbHVnaW5zLmpzJztcbmltcG9ydCB7IE1vY2tzTWFuYWdlciB9IGZyb20gJy4vbW9ja3MtbWFuYWdlci5qcyc7XG5pbXBvcnQgdHlwZSB7IFNlcnZpY2VNb2NrIH0gZnJvbSAnLi9zZXJ2aWNlLW1vY2suanMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlcnZpY2VUZXN0Q29uZmlnPFNlcnZpY2U+IHtcbiAgc2VydmljZTogQ29uc3RydWN0b3I8U2VydmljZT47XG4gIGluc3RhbmNlPzogRmFzdGlmeUluc3RhbmNlO1xuICBtb2Nrcz86IFNlcnZpY2VNb2NrW107XG4gIHBsdWdpbnM/OiBQbHVnaW5zO1xufVxuXG4vKipcbiAqIENvbmZpZ3VyZXMgc2VydmljZSBmb3IgdGVzdGluZ1xuICogQHBhcmFtIGNvbmZpZyB3aXRoIHNlcnZpY2UgYW5kIG1vY2tzXG4gKiBAcmV0dXJucyBjb25maWd1cmVkIHNlcnZpY2UgJiBwcm9taXNlIHdoaWNoIHJlc29sdmVzIHdoZW4gYXN5bmMgaW5pdGlhbGl6ZXIgZG9uZSAoaWYgaXQgZXhpc3RzLCBvdGhlcndpc2UgcmVzb2x2ZWQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVTZXJ2aWNlVGVzdDxTZXJ2aWNlPihjb25maWc6IFNlcnZpY2VUZXN0Q29uZmlnPFNlcnZpY2U+KTogUHJvbWlzZTxTZXJ2aWNlPiAmIFNlcnZpY2Uge1xuICBjb25zdCBzZXJ2aWNlOiBDb25zdHJ1Y3RvcjxTZXJ2aWNlPiA9IGNvbmZpZy5zZXJ2aWNlO1xuICBpc0luamVjdGFibGUoc2VydmljZSk7XG5cbiAgY29uc3QgaW5qZWN0YWJsZXNXaXRoTW9ja3MgPSBNb2Nrc01hbmFnZXIuY3JlYXRlKF9pbmplY3RhYmxlc0hvbGRlciwgY29uZmlnLm1vY2tzKTtcbiAgaWYgKGNvbmZpZy5pbnN0YW5jZSkgaW5qZWN0YWJsZXNXaXRoTW9ja3MuaW5qZWN0U2luZ2xldG9uKEZhc3RpZnlJbnN0YW5jZVRva2VuLCBjb25maWcuaW5zdGFuY2UpO1xuICBpZiAoIWluamVjdGFibGVzV2l0aE1vY2tzLmhhcyhGYXN0aWZ5SW5zdGFuY2VUb2tlbikpIGluamVjdGFibGVzV2l0aE1vY2tzLmluamVjdFNpbmdsZXRvbihGYXN0aWZ5SW5zdGFuY2VUb2tlbiwgZmFzdGlmeSgpLCBmYWxzZSk7XG5cbiAgY29uc3QgZmFzdGlmeUluc3RhbmNlID0gaW5qZWN0YWJsZXNXaXRoTW9ja3MuZ2V0U2luZ2xldG9uPEZhc3RpZnlJbnN0YW5jZT4oRmFzdGlmeUluc3RhbmNlVG9rZW4pIGFzIEZhc3RpZnlJbnN0YW5jZTtcbiAgY29uc3QgY2xhc3NMb2FkZXIgPSBjbGFzc0xvYWRlckZhY3RvcnkoaW5qZWN0YWJsZXNXaXRoTW9ja3MpIGFzIENsYXNzTG9hZGVyICYgeyByZXNldChzY29wZTogRGVwZW5kZW5jeVNjb3BlKTogdm9pZCB9O1xuICBjbGFzc0xvYWRlci5yZXNldChkZWZhdWx0U2NvcGUpO1xuICBpZiAoIWZhc3RpZnlJbnN0YW5jZS5oYXNEZWNvcmF0b3IoQ0xBU1NfTE9BREVSKSkgZmFzdGlmeUluc3RhbmNlLmRlY29yYXRlKENMQVNTX0xPQURFUiwgY2xhc3NMb2FkZXIpO1xuXG4gIGxvYWRQbHVnaW5zKGZhc3RpZnlJbnN0YW5jZSwgY29uZmlnLnBsdWdpbnMpO1xuXG4gIGNvbnN0IGluc3RhbmNlID0gc2VydmljZVtDUkVBVE9SXS5yZWdpc3RlcjxTZXJ2aWNlPihjbGFzc0xvYWRlcik7XG5cbiAgbGV0IHByb21pc2U6IFByb21pc2U8dW5rbm93bj4gfCBudWxsID0gbnVsbDtcblxuICAvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGRvZXNuJ3Qga25vdyB0aGF0IHdlIGhhdmUgY2xhc3MgaW5zdGFuY2UgaGVyZVxuICByZXR1cm4gbmV3IFByb3h5KGluc3RhbmNlLCB7XG4gICAgZ2V0PFQ+KHRhcmdldDogVCwgcDoga2V5b2YgVCB8ICd0aGVuJyB8ICdjYXRjaCcgfCAnZmluYWxseScpIHtcbiAgICAgIGlmIChwID09PSAndGhlbicgfHwgcCA9PT0gJ2NhdGNoJyB8fCBwID09PSAnZmluYWxseScpIHtcbiAgICAgICAgaWYgKHByb21pc2UgPT0gbnVsbClcbiAgICAgICAgICBwcm9taXNlID0gaGFzQXN5bmNJbml0aWFsaXplcihzZXJ2aWNlKVxuICAgICAgICAgICAgPyAvLyBAdHMtZXhwZWN0LWVycm9yIGlmIHNlcnZpY2UgaGFzIGFzeW5jIGluaXRpYWxpemVyIHRoZW4gaXQgZXhpc3RzIGluIHJlYWR5TWFwXG4gICAgICAgICAgICAgIGluaXRpYWxpemVyc01hcC5nZXQoc2VydmljZSkudGhlbigoKSA9PiB0YXJnZXQpXG4gICAgICAgICAgICA6IFByb21pc2UucmVzb2x2ZSh0YXJnZXQpO1xuXG4gICAgICAgIHJldHVybiBwcm9taXNlW3AgYXMgJ3RoZW4nIHwgJ2NhdGNoJyB8ICdmaW5hbGx5J10uYmluZChwcm9taXNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldFtwXTtcbiAgICB9LFxuICB9KSBhcyBQcm9taXNlPFNlcnZpY2U+ICYgU2VydmljZTtcbn1cblxuZnVuY3Rpb24gaXNJbmplY3RhYmxlPFNlcnZpY2U+KHNlcnZpY2U6IENvbnN0cnVjdG9yPFNlcnZpY2U+KTogYXNzZXJ0cyBzZXJ2aWNlIGlzIEluamVjdGFibGVTZXJ2aWNlIHtcbiAgaWYgKCEoQ1JFQVRPUiBpbiBzZXJ2aWNlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignUHJvdmlkZWQgc2VydmljZSBkb2VzIG5vdCBhbm5vdGF0ZWQgd2l0aCBAU2VydmljZSEnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNBc3luY0luaXRpYWxpemVyKHNlcnZpY2U6IEluamVjdGFibGVTZXJ2aWNlKTogc2VydmljZSBpcyBJbmplY3RhYmxlU2VydmljZSAmIFJlcXVpcmVkPEluamVjdGFibGVTZXJ2aWNlPiB7XG4gIHJldHVybiBJTklUSUFMSVpFUiBpbiBzZXJ2aWNlO1xufVxuIl19